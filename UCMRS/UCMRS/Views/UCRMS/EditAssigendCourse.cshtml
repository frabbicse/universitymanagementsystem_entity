@model UCMRS.Models.Entity.AssignCourse

@{
    ViewBag.Title = "EditAssigendCourse";
}

<h2>EditAssigendCourse</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.Id)

   <div class="card">
        <div class="card-header"> Assign Course for Respective Teacher</div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.DeptId, htmlAttributes: new { @class = "col-form-label text-left" })
                        @Html.DropDownListFor(model => model.DeptId, ViewBag.Department as IEnumerable<SelectListItem>, "Select Department",
                                       new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.DeptId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.TeacherId, htmlAttributes: new { @class = "col-form-label text-left" })
                        @Html.DropDownListFor(model => model.TeacherId, new SelectList(string.Empty, "Value", "Text"), "Select Teacher",
                                      new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TeacherId, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.CreditTaken, htmlAttributes: new { @class = "col-form-label text-left" })
                        @Html.EditorFor(model => model.CreditTaken, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.CreditTaken, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.RemainingCredit, htmlAttributes: new { @class = "col-form-label text-left" })
                        @Html.EditorFor(model => model.RemainingCredit, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.RemainingCredit, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.CourseId, htmlAttributes: new { @class = "col-form-label text-left" })
                        @Html.DropDownListFor(model => model.CourseId, new SelectList(string.Empty, "Value", "Text"), "Select Course",
                                      new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.CourseId, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6"></div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.CourseName, htmlAttributes: new { @class = "col-form-label text-left" })
                        @Html.EditorFor(model => model.CourseName, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.CourseName, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Credit, htmlAttributes: new { @class = "col-form-label text-left" })
                        @Html.EditorFor(model => model.Credit, new { htmlAttributes = new { @class = "form-control", @readonly = "readonly" } })
                        @Html.ValidationMessageFor(model => model.Credit, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="offset-md-11 col-md-12">
                    <input type="submit" value="Save" class="btn btn-outline-info btn-sm position-static" />
                </div>
            </div>
        </div>
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jquery")
    @*<script src="~/Scripts/jquery-3.3.1.min.js"></script>*@
    <script>
        $(document).ready(function() {

            $("#DeptId").change(function () {

                $("#TeacherId").empty();
                $("#CourseId").empty();

                //Teacher Dropdown
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetTeacher")",
                    datatype: "Json",
                    data: { id: $("#DeptId").val() },
                    success: function (data) {
                        var items = "";
                        items += "<option value = '' disabled selected>Please select Teacher</option>";
                        $.each(data, function (index, value) {
                            items += ('<option value="' + value.TeacherId + '">'
                                + value.Name + '</option>');
                        });
                        $("#TeacherId").html(items);
                    }
                });

                //Course Dropdown
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetCourse")",
                    datatype: "Json",
                    data: { id: $("#DeptId").val() },
                    success: function (data) {
                        var items = "";
                        items += "<option value = '' disabled selected>Please select Teacher</option>";
                        $.each(data, function (index, value) {
                            items += ('<option value="' + value.Id + '">'
                                + value.Code + '</option>');
                        });
                        $("#CourseId").html(items);
                    }
                });

            });

            var credit = 0;
            var remainingCredit = 0;
            var creditTaken = 0;

            $("#CourseId").change(function() {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetCourseDetails")",
                    datatype: "Json",
                    data: { id: $("#CourseId").val() },
                    success: function (data) {
                        $("#CourseName").val(data.Name) ;
                       credit = $("#Credit").val(data.Credit);

                        remainingCredit = parseFloat(creditTaken.val()) - parseFloat(credit.val());

                        var rc = remainingCredit;$("#RemainingCredit").val(rc);
                        alert(rc); 
                    }
                });
            });


            $("#TeacherId").change(function() {
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetTeacherDetails")",
                    datatype: "Json",
                    data: { id: $("#TeacherId").val() },
                    success: function (data) {
                       creditTaken =  $("#CreditTaken").val(data.CreditTaken) ;
                       // $("#RemainingCredit").text(data.RemainingCredit) ;

                    }
                });
            });
        })
    </script>
}
